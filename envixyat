local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "AnomicHAX",
   LoadingTitle = "AnomicHAX",
   LoadingSubtitle = "by envixyat",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil,
      FileName = "AAM"
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "AnomicHAX",
      Subtitle = "Key System",
      Note = "Please join our discord to get the key: VsJkUVkKCw",
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"AErF34dc"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local Tab = Window:CreateTab("Player", 4483362458) -- Title, Image

local Players = game:GetService("Players")

-- Function to set noclip
local function setNoclip(enabled)
    local player = Players.LocalPlayer
    if player and player.Character then
        for _, part in pairs(player.Character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = not enabled
            end
        end
    end
end

-- Create the toggle
local Toggle = Tab:CreateToggle({
    Name = "Noclip",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        -- Set noclip based on the toggle value
        setNoclip(Value)
    end,
})

local Players = game:GetService("Players")

-- Function to find the nearest player
local function findNearestPlayer()
    local localPlayer = Players.LocalPlayer
    local nearestPlayer = nil
    local shortestDistance = math.huge

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local distance = (localPlayer.Character.HumanoidRootPart.Position - player.Character.HumanoidRootPart.Position).Magnitude
            if distance < shortestDistance then
                shortestDistance = distance
                nearestPlayer = player
            end
        end
    end

    return nearestPlayer
end

-- Function to teleport to the nearest player
local function teleportToNearestPlayer()
    local localPlayer = Players.LocalPlayer
    local nearestPlayer = findNearestPlayer()
    if nearestPlayer and nearestPlayer.Character and nearestPlayer.Character:FindFirstChild("HumanoidRootPart") then
        localPlayer.Character.HumanoidRootPart.CFrame = nearestPlayer.Character.HumanoidRootPart.CFrame
    end
end

-- Create the button
local Button = Tab:CreateButton({
    Name = "Teleport to Nearest Player",
    Callback = function()
        teleportToNearestPlayer()
    end,
})

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local highlights = {}

local function highlightPlayers(enabled)
    if enabled then
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= Players.LocalPlayer and player.Character then
                if not highlights[player] then
                    local highlight = Instance.new("Highlight")
                    highlight.Parent = player.Character
                    highlights[player] = highlight
                end
            end
        end
    else
        for player, highlight in pairs(highlights) do
            if highlight then
                highlight:Destroy()
            end
        end
        highlights = {}
    end
end

local Toggle = Tab:CreateToggle({
    Name = "Highlight Players",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        highlightPlayers(Value)
    end,
})

Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function(character)
        if Toggle.CurrentValue then
            local highlight = Instance.new("Highlight")
            highlight.Parent = character
            highlights[player] = highlight
        end
    end)
end)

Players.PlayerRemoving:Connect(function(player)
    if highlights[player] then
        highlights[player]:Destroy()
        highlights[player] = nil
    end
end)

RunService.RenderStepped:Connect(function()
    if Toggle.CurrentValue then
        highlightPlayers(true)
    end
end)

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local infiniteHealthEnabled = false
local connection

local function setInfiniteHealth(enabled)
    local player = Players.LocalPlayer
    local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")

    if not humanoid then return end

    if enabled then
        humanoid.MaxHealth = math.huge
        humanoid.Health = math.huge
        connection = humanoid:GetPropertyChangedSignal("Health"):Connect(function()
            if humanoid.Health < humanoid.MaxHealth then
                humanoid.Health = humanoid.MaxHealth
            end
        end)
    else
        humanoid.MaxHealth = 100 -- or any default value you prefer
        humanoid.Health = humanoid.MaxHealth
        if connection then
            connection:Disconnect()
            connection = nil
        end
    end
end

-- Create the toggle
local Toggle = Tab:CreateToggle({
    Name = "Infinite Health",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        infiniteHealthEnabled = Value
        setInfiniteHealth(infiniteHealthEnabled)
    end,
})

-- Ensure the infinite health is set correctly when character respawns
Players.LocalPlayer.CharacterAdded:Connect(function(character)
    if infiniteHealthEnabled then
        setInfiniteHealth(true)
    end
end)

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")

local Slider = Tab:CreateSlider({
    Name = "FOV",
    Range = {70, 120}, -- Reasonable range for FOV adjustments
    Increment = 1,
    Suffix = "Â°",
    CurrentValue = Workspace.CurrentCamera.FieldOfView, -- Set default to current FOV
    Flag = "Slider1", -- Ensure every element has a different flag if you're using configuration saving to avoid overlaps
    Callback = function(Value)
        -- The function that takes place when the slider changes
        -- The variable (Value) is a number which correlates to the value the slider is currently at
        Workspace.CurrentCamera.FieldOfView = Value
    end,
})

